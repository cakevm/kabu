use std::env;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

fn main() {
    // Tell Cargo to re-run this build script if the environment variable changes
    println!("cargo:rerun-if-env-changed=KEY_ENCRYPTION_PWD");

    // Get the path to src/private.rs
    let manifest_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let dest_path = PathBuf::from(manifest_dir).join("src").join("private.rs");

    // Read from environment variable or use default
    let key_bytes = if let Ok(key_hex) = env::var("KEY_ENCRYPTION_PWD") {
        // Parse hex string into bytes
        match hex::decode(&key_hex) {
            Ok(bytes) => match bytes.try_into() {
                Ok(arr) => arr,
                Err(_) => {
                    println!("cargo:warning=KEY_ENCRYPTION_PWD must be exactly 16 bytes (32 hex characters), using default");
                    [0u8; 16]
                }
            },
            Err(_) => {
                println!("cargo:warning=KEY_ENCRYPTION_PWD must be a valid hex string, using default");
                [0u8; 16]
            }
        }
    } else {
        // Default key (all zeros)
        [0u8; 16]
    };

    // Generate the Rust code
    let mut f = File::create(&dest_path).unwrap();
    writeln!(
        f,
        "// This file is auto-generated by build.rs
// DO NOT EDIT MANUALLY
// To change the key, set the KEY_ENCRYPTION_PWD environment variable (32 hex chars)

pub const KEY_ENCRYPTION_PWD: [u8; 16] = {key_bytes:?};"
    )
    .unwrap();

    println!("cargo:warning=Generated src/private.rs with KEY_ENCRYPTION_PWD");
}
